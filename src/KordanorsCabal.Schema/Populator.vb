Public Module Populator
    Sub Populate(connection As SqliteConnection)
        PopulateCharacterTypes(connection)
        PopulateCharacterStatisticTypes(connection)
        PopulateCharacterTypeInitialStatistics(connection)
        PopulateCharacterTypeAttackTypes(connection)
        PopulateItemTypes(connection)
        PopulateCharacterTypeBribes(connection)
        PopulateCharacterTypeEnemies(connection)
        PopulateCharacterTypeLoots(connection)
        PopulateCharacterTypePartingShots(connection)
        PopulateDungeonLevels(connection)
        PopulateCharacterTypeSpawnCounts(connection)
        PopulateLocationTypes(connection)
        PopulateCharacterTypeSpawnLocations(connection)
        PopulateEquipSlots(connection)
        PopulateQuestTypes(connection)
        PopulateItemStatisticTypes(connection)
        PopulateItemTypeEquipSlots(connection)
        PopulateItemTypeEvents(connection)
        PopulateShoppeTypes(connection)
        PopulateItemTypeShopTypes(connection)
        PopulateItemTypeSpawnCounts(connection)
        PopulateItemTypeSpawnLocationTypes(connection)
        PopulateItemTypeCharacterStatisticBuffs(connection)
        PopulateItemTypeStatisticTypes(connection)
        PopulateItemTypeStatistics(connection)
        PopulateFeatureTypes(connection)
        PopulateDirections(connection)
        PopulateRouteTypes(connection)
        PopulateRouteTypeLocks(connection)
        PopulateSpellTypes(connection)
        PopulateSpellTypeRequiredPowers(connection)
        PopulateLocations(connection)
        PopulateCharacters(connection)
        PopulateCharacterLocations(connection)
        PopulateCharacterSpells(connection)
        PopulatePlayers(connection)
        PopulateItems(connection)
        PopulateCharacterEquipSlots(connection)
        PopulateCharacterQuestCompletions(connection)
        PopulateCharacterQuests(connection)
        PopulateCharacterStatistics(connection)
        PopulateInventories(connection)
        PopulateInventoryItems(connection)
        PopulateItemStatistics(connection)
        PopulateLocationDungeonLevels(connection)
        PopulateFeatures(connection)
        PopulateLocationStatistics(connection)
        PopulateRoutes(connection)
    End Sub
    Sub PopulateCharacterStatisticTypesRecord(connection As SqliteConnection, CharacterStatisticTypeId As Long, CharacterStatisticTypeName As String, Abbreviation As String, MinimumValue As Long, DefaultValue As Long?, MaximumValue As Long)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.CharacterStatisticTypes}]([{Columns.CharacterStatisticTypeIdColumn}], [{Columns.CharacterStatisticTypeNameColumn}], [{Columns.AbbreviationColumn}], [{Columns.MinimumValueColumn}], [{Columns.DefaultValueColumn}], [{Columns.MaximumValueColumn}]) VALUES (@{Columns.CharacterStatisticTypeIdColumn}, @{Columns.CharacterStatisticTypeNameColumn}, @{Columns.AbbreviationColumn}, @{Columns.MinimumValueColumn}, @{Columns.DefaultValueColumn}, @{Columns.MaximumValueColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.CharacterStatisticTypeIdColumn}", CharacterStatisticTypeId)
            command.Parameters.AddWithValue($"@{Columns.CharacterStatisticTypeNameColumn}", CharacterStatisticTypeName)
            command.Parameters.AddWithValue($"@{Columns.AbbreviationColumn}", Abbreviation)
            command.Parameters.AddWithValue($"@{Columns.MinimumValueColumn}", MinimumValue)
            command.Parameters.AddWithValue($"@{Columns.DefaultValueColumn}", If(DefaultValue Is Nothing, CObj(DBNull.Value), DefaultValue))
            command.Parameters.AddWithValue($"@{Columns.MaximumValueColumn}", MaximumValue)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Friend Const CharacterStatisticType1 = 1
    Friend Const CharacterStatisticType2 = 2
    Friend Const CharacterStatisticType3 = 3
    Friend Const CharacterStatisticType4 = 4
    Friend Const CharacterStatisticType5 = 5
    Friend Const CharacterStatisticType6 = 6
    Friend Const CharacterStatisticType7 = 7
    Friend Const CharacterStatisticType8 = 8
    Friend Const CharacterStatisticType9 = 9
    Friend Const CharacterStatisticType10 = 10
    Friend Const CharacterStatisticType11 = 11
    Friend Const CharacterStatisticType12 = 12
    Friend Const CharacterStatisticType13 = 13
    Friend Const CharacterStatisticType14 = 14
    Friend Const CharacterStatisticType15 = 15
    Friend Const CharacterStatisticType16 = 16
    Friend Const CharacterStatisticType17 = 17
    Friend Const CharacterStatisticType18 = 18
    Friend Const CharacterStatisticType19 = 19
    Friend Const CharacterStatisticType20 = 20
    Friend Const CharacterStatisticType21 = 21
    Friend Const CharacterStatisticType22 = 22
    Friend Const CharacterStatisticType23 = 23
    Friend Const CharacterStatisticType24 = 24
    Friend Const CharacterStatisticType25 = 25
    Sub PopulateCharacterStatisticTypes(connection As SqliteConnection)
        PopulateCharacterStatisticTypesRecord(connection, CharacterStatisticType1, "Strength", "STR", 0, Nothing, 99999)
        PopulateCharacterStatisticTypesRecord(connection, CharacterStatisticType2, "Dexterity", "DEX", 0, Nothing, 99999)
        PopulateCharacterStatisticTypesRecord(connection, CharacterStatisticType3, "Influence", "INF", 0, Nothing, 99999)
        PopulateCharacterStatisticTypesRecord(connection, CharacterStatisticType4, "Willpower", "WIL", 0, Nothing, 99999)
        PopulateCharacterStatisticTypesRecord(connection, CharacterStatisticType5, "Power", "POW", 0, Nothing, 99999)
        PopulateCharacterStatisticTypesRecord(connection, CharacterStatisticType6, "HP", "HP", 0, Nothing, 99999)
        PopulateCharacterStatisticTypesRecord(connection, CharacterStatisticType7, "MP", "MP", 0, Nothing, 99999)
        PopulateCharacterStatisticTypesRecord(connection, CharacterStatisticType8, "Mana", "Mana", 0, Nothing, 99999)
        PopulateCharacterStatisticTypesRecord(connection, CharacterStatisticType9, "Unassigned", "Unassigned", 0, Nothing, 99999)
        PopulateCharacterStatisticTypesRecord(connection, CharacterStatisticType10, "Unarmed Maximum Damage", "MAXDMG", 0, 1, 99999)
        PopulateCharacterStatisticTypesRecord(connection, CharacterStatisticType11, "Base Maximum Defend", "MAXDEF", 0, 1, 99999)
        PopulateCharacterStatisticTypesRecord(connection, CharacterStatisticType12, "Wounds", "Wounds", 0, Nothing, 99999)
        PopulateCharacterStatisticTypesRecord(connection, CharacterStatisticType13, "Stress", "Stress", 0, Nothing, 99999)
        PopulateCharacterStatisticTypesRecord(connection, CharacterStatisticType14, "Money", "$", 0, Nothing, 99999)
        PopulateCharacterStatisticTypesRecord(connection, CharacterStatisticType15, "Fatigue", "Fatigue", 0, Nothing, 99999)
        PopulateCharacterStatisticTypesRecord(connection, CharacterStatisticType16, "XP", "XP", 0, Nothing, 99999)
        PopulateCharacterStatisticTypesRecord(connection, CharacterStatisticType17, "XP Goal", "XP Goal", 0, Nothing, 99999)
        PopulateCharacterStatisticTypesRecord(connection, CharacterStatisticType18, "Drunkenness", "Drunkenness", 0, 0, 99999)
        PopulateCharacterStatisticTypesRecord(connection, CharacterStatisticType19, "Highness", "Highness", 0, Nothing, 99999)
        PopulateCharacterStatisticTypesRecord(connection, CharacterStatisticType20, "Hunger", "Hunger", 0, 0, 100)
        PopulateCharacterStatisticTypesRecord(connection, CharacterStatisticType21, "Food Poisoning", "Food Poisoning", 0, Nothing, 99999)
        PopulateCharacterStatisticTypesRecord(connection, CharacterStatisticType22, "Chafing", "Chafing", 0, 0, 99999)
        PopulateCharacterStatisticTypesRecord(connection, CharacterStatisticType23, "Immobilization", "Immobilization", 0, Nothing, 99999)
        PopulateCharacterStatisticTypesRecord(connection, CharacterStatisticType24, "Base Lift", "Base Lift", 0, 0, 99999)
        PopulateCharacterStatisticTypesRecord(connection, CharacterStatisticType25, "Bonus Lift", "Bonus Lift", 0, 0, 99999)
    End Sub
    Sub PopulateCharacterTypeBribesRecord(connection As SqliteConnection, CharacterTypeId As Long, ItemTypeId As Long)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.CharacterTypeBribes}]([{Columns.CharacterTypeIdColumn}], [{Columns.ItemTypeIdColumn}]) VALUES (@{Columns.CharacterTypeIdColumn}, @{Columns.ItemTypeIdColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.CharacterTypeIdColumn}", CharacterTypeId)
            command.Parameters.AddWithValue($"@{Columns.ItemTypeIdColumn}", ItemTypeId)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulateCharacterTypeBribes(connection As SqliteConnection)
        PopulateCharacterTypeBribesRecord(connection, CharacterType6, ItemType26)
        PopulateCharacterTypeBribesRecord(connection, CharacterType6, ItemType28)
        PopulateCharacterTypeBribesRecord(connection, CharacterType7, ItemType26)
        PopulateCharacterTypeBribesRecord(connection, CharacterType9, ItemType28)
        PopulateCharacterTypeBribesRecord(connection, CharacterType10, ItemType30)
        PopulateCharacterTypeBribesRecord(connection, CharacterType2, ItemType37)
    End Sub
    Sub PopulateCharacterTypeEnemiesRecord(connection As SqliteConnection, CharacterTypeId As Long, EnemyCharacterTypeId As Long)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.CharacterTypeEnemies}]([{Columns.CharacterTypeIdColumn}], [{Columns.EnemyCharacterTypeIdColumn}]) VALUES (@{Columns.CharacterTypeIdColumn}, @{Columns.EnemyCharacterTypeIdColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.CharacterTypeIdColumn}", CharacterTypeId)
            command.Parameters.AddWithValue($"@{Columns.EnemyCharacterTypeIdColumn}", EnemyCharacterTypeId)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulateCharacterTypeEnemies(connection As SqliteConnection)
        PopulateCharacterTypeEnemiesRecord(connection, CharacterType1, CharacterType11)
        PopulateCharacterTypeEnemiesRecord(connection, CharacterType2, CharacterType11)
        PopulateCharacterTypeEnemiesRecord(connection, CharacterType3, CharacterType11)
        PopulateCharacterTypeEnemiesRecord(connection, CharacterType4, CharacterType11)
        PopulateCharacterTypeEnemiesRecord(connection, CharacterType5, CharacterType11)
        PopulateCharacterTypeEnemiesRecord(connection, CharacterType6, CharacterType11)
        PopulateCharacterTypeEnemiesRecord(connection, CharacterType7, CharacterType11)
        PopulateCharacterTypeEnemiesRecord(connection, CharacterType8, CharacterType11)
        PopulateCharacterTypeEnemiesRecord(connection, CharacterType9, CharacterType11)
        PopulateCharacterTypeEnemiesRecord(connection, CharacterType10, CharacterType11)
        PopulateCharacterTypeEnemiesRecord(connection, CharacterType12, CharacterType11)
        PopulateCharacterTypeEnemiesRecord(connection, CharacterType13, CharacterType11)
        PopulateCharacterTypeEnemiesRecord(connection, CharacterType14, CharacterType11)
        PopulateCharacterTypeEnemiesRecord(connection, CharacterType15, CharacterType11)
        PopulateCharacterTypeEnemiesRecord(connection, CharacterType16, CharacterType11)
        PopulateCharacterTypeEnemiesRecord(connection, CharacterType11, CharacterType1)
        PopulateCharacterTypeEnemiesRecord(connection, CharacterType11, CharacterType2)
        PopulateCharacterTypeEnemiesRecord(connection, CharacterType11, CharacterType3)
        PopulateCharacterTypeEnemiesRecord(connection, CharacterType11, CharacterType4)
        PopulateCharacterTypeEnemiesRecord(connection, CharacterType11, CharacterType5)
        PopulateCharacterTypeEnemiesRecord(connection, CharacterType11, CharacterType6)
        PopulateCharacterTypeEnemiesRecord(connection, CharacterType11, CharacterType7)
        PopulateCharacterTypeEnemiesRecord(connection, CharacterType11, CharacterType8)
        PopulateCharacterTypeEnemiesRecord(connection, CharacterType11, CharacterType9)
        PopulateCharacterTypeEnemiesRecord(connection, CharacterType11, CharacterType10)
        PopulateCharacterTypeEnemiesRecord(connection, CharacterType11, CharacterType12)
        PopulateCharacterTypeEnemiesRecord(connection, CharacterType11, CharacterType13)
        PopulateCharacterTypeEnemiesRecord(connection, CharacterType11, CharacterType14)
        PopulateCharacterTypeEnemiesRecord(connection, CharacterType11, CharacterType15)
        PopulateCharacterTypeEnemiesRecord(connection, CharacterType11, CharacterType16)
    End Sub
    Sub PopulateCharacterTypeLootsRecord(connection As SqliteConnection, CharacterTypeId As Long, ItemTypeId As Long?, Weight As Long)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.CharacterTypeLoots}]([{Columns.CharacterTypeIdColumn}], [{Columns.ItemTypeIdColumn}], [{Columns.WeightColumn}]) VALUES (@{Columns.CharacterTypeIdColumn}, @{Columns.ItemTypeIdColumn}, @{Columns.WeightColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.CharacterTypeIdColumn}", CharacterTypeId)
            command.Parameters.AddWithValue($"@{Columns.ItemTypeIdColumn}", If(ItemTypeId Is Nothing, CObj(DBNull.Value), ItemTypeId))
            command.Parameters.AddWithValue($"@{Columns.WeightColumn}", Weight)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulateCharacterTypeLoots(connection As SqliteConnection)
        PopulateCharacterTypeLootsRecord(connection, CharacterType1, Nothing, 1)
        PopulateCharacterTypeLootsRecord(connection, CharacterType1, ItemType22, 1)
        PopulateCharacterTypeLootsRecord(connection, CharacterType2, Nothing, 2)
        PopulateCharacterTypeLootsRecord(connection, CharacterType2, ItemType36, 1)
        PopulateCharacterTypeLootsRecord(connection, CharacterType3, Nothing, 1)
        PopulateCharacterTypeLootsRecord(connection, CharacterType3, ItemType40, 1)
        PopulateCharacterTypeLootsRecord(connection, CharacterType4, Nothing, 1)
        PopulateCharacterTypeLootsRecord(connection, CharacterType4, ItemType7, 1)
        PopulateCharacterTypeLootsRecord(connection, CharacterType6, Nothing, 2)
        PopulateCharacterTypeLootsRecord(connection, CharacterType6, ItemType8, 4)
        PopulateCharacterTypeLootsRecord(connection, CharacterType6, ItemType24, 1)
        PopulateCharacterTypeLootsRecord(connection, CharacterType6, ItemType35, 1)
        PopulateCharacterTypeLootsRecord(connection, CharacterType7, Nothing, 2)
        PopulateCharacterTypeLootsRecord(connection, CharacterType7, ItemType8, 5)
        PopulateCharacterTypeLootsRecord(connection, CharacterType7, ItemType24, 2)
        PopulateCharacterTypeLootsRecord(connection, CharacterType7, ItemType35, 1)
        PopulateCharacterTypeLootsRecord(connection, CharacterType8, ItemType44, 1)
        PopulateCharacterTypeLootsRecord(connection, CharacterType9, Nothing, 2)
        PopulateCharacterTypeLootsRecord(connection, CharacterType9, ItemType24, 1)
        PopulateCharacterTypeLootsRecord(connection, CharacterType9, ItemType35, 2)
        PopulateCharacterTypeLootsRecord(connection, CharacterType10, Nothing, 1)
        PopulateCharacterTypeLootsRecord(connection, CharacterType10, ItemType42, 1)
        PopulateCharacterTypeLootsRecord(connection, CharacterType12, Nothing, 1)
        PopulateCharacterTypeLootsRecord(connection, CharacterType12, ItemType34, 1)
        PopulateCharacterTypeLootsRecord(connection, CharacterType13, ItemType21, 1)
        PopulateCharacterTypeLootsRecord(connection, CharacterType14, Nothing, 1)
        PopulateCharacterTypeLootsRecord(connection, CharacterType14, ItemType9, 3)
        PopulateCharacterTypeLootsRecord(connection, CharacterType15, Nothing, 2)
        PopulateCharacterTypeLootsRecord(connection, CharacterType15, ItemType41, 1)
        PopulateCharacterTypeLootsRecord(connection, CharacterType16, Nothing, 1)
        PopulateCharacterTypeLootsRecord(connection, CharacterType16, ItemType38, 3)
    End Sub
    Sub PopulateCharacterTypePartingShotsRecord(connection As SqliteConnection, CharacterTypeId As Long, PartingShot As String, Weight As Long)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.CharacterTypePartingShots}]([{Columns.CharacterTypeIdColumn}], [{Columns.PartingShotColumn}], [{Columns.WeightColumn}]) VALUES (@{Columns.CharacterTypeIdColumn}, @{Columns.PartingShotColumn}, @{Columns.WeightColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.CharacterTypeIdColumn}", CharacterTypeId)
            command.Parameters.AddWithValue($"@{Columns.PartingShotColumn}", PartingShot)
            command.Parameters.AddWithValue($"@{Columns.WeightColumn}", Weight)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulateCharacterTypePartingShots(connection As SqliteConnection)
        PopulateCharacterTypePartingShotsRecord(connection, CharacterType1, "I smite thee dead for the honor of Kordanor!", 1)
        PopulateCharacterTypePartingShotsRecord(connection, CharacterType2, "SNAKE!", 1)
        PopulateCharacterTypePartingShotsRecord(connection, CharacterType3, "Nana Nana Nana Nana!", 1)
        PopulateCharacterTypePartingShotsRecord(connection, CharacterType4, "I checkmate thee in Kordanor's service!", 1)
        PopulateCharacterTypePartingShotsRecord(connection, CharacterType5, "Kordanor's will be done!", 1)
        PopulateCharacterTypePartingShotsRecord(connection, CharacterType6, "@#$% you!", 1)
        PopulateCharacterTypePartingShotsRecord(connection, CharacterType7, "@#$% you!", 1)
        PopulateCharacterTypePartingShotsRecord(connection, CharacterType8, "Ah! Fresh meat to eat!", 1)
        PopulateCharacterTypePartingShotsRecord(connection, CharacterType9, "Death to ne'er-do-wells!", 1)
        PopulateCharacterTypePartingShotsRecord(connection, CharacterType10, "Quick! Take his shoes so I can poop in them!", 1)
        PopulateCharacterTypePartingShotsRecord(connection, CharacterType12, "Praise be to Kordanor that I could end yer futile quest!", 1)
        PopulateCharacterTypePartingShotsRecord(connection, CharacterType13, "Squeek! *NOM*", 1)
        PopulateCharacterTypePartingShotsRecord(connection, CharacterType15, "Hiss!", 1)
        PopulateCharacterTypePartingShotsRecord(connection, CharacterType16, "Breains!", 1)
    End Sub
    Sub PopulateDungeonLevelsRecord(connection As SqliteConnection, DungeonLevelId As Long, DungeonLevelName As String)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.DungeonLevels}]([{Columns.DungeonLevelIdColumn}], [{Columns.DungeonLevelNameColumn}]) VALUES (@{Columns.DungeonLevelIdColumn}, @{Columns.DungeonLevelNameColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.DungeonLevelIdColumn}", DungeonLevelId)
            command.Parameters.AddWithValue($"@{Columns.DungeonLevelNameColumn}", DungeonLevelName)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulateDungeonLevels(connection As SqliteConnection)
        PopulateDungeonLevelsRecord(connection, 1, "Level I")
        PopulateDungeonLevelsRecord(connection, 2, "Level II")
        PopulateDungeonLevelsRecord(connection, 3, "Level III")
        PopulateDungeonLevelsRecord(connection, 4, "Level IV")
        PopulateDungeonLevelsRecord(connection, 5, "Level V")
        PopulateDungeonLevelsRecord(connection, 6, "The Moon")
    End Sub
    Sub PopulateCharacterTypeSpawnCountsRecord(connection As SqliteConnection, CharacterTypeId As Long, DungeonLevelId As Long, SpawnCount As Long)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.CharacterTypeSpawnCounts}]([{Columns.CharacterTypeIdColumn}], [{Columns.DungeonLevelIdColumn}], [{Columns.SpawnCountColumn}]) VALUES (@{Columns.CharacterTypeIdColumn}, @{Columns.DungeonLevelIdColumn}, @{Columns.SpawnCountColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.CharacterTypeIdColumn}", CharacterTypeId)
            command.Parameters.AddWithValue($"@{Columns.DungeonLevelIdColumn}", DungeonLevelId)
            command.Parameters.AddWithValue($"@{Columns.SpawnCountColumn}", SpawnCount)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulateCharacterTypeSpawnCounts(connection As SqliteConnection)
        PopulateCharacterTypeSpawnCountsRecord(connection, 1, 1, 1)
        PopulateCharacterTypeSpawnCountsRecord(connection, 1, 2, 10)
        PopulateCharacterTypeSpawnCountsRecord(connection, 1, 3, 25)
        PopulateCharacterTypeSpawnCountsRecord(connection, 2, 1, 24)
        PopulateCharacterTypeSpawnCountsRecord(connection, 2, 2, 12)
        PopulateCharacterTypeSpawnCountsRecord(connection, 3, 1, 15)
        PopulateCharacterTypeSpawnCountsRecord(connection, 3, 2, 30)
        PopulateCharacterTypeSpawnCountsRecord(connection, 3, 3, 45)
        PopulateCharacterTypeSpawnCountsRecord(connection, 3, 4, 30)
        PopulateCharacterTypeSpawnCountsRecord(connection, 3, 5, 15)
        PopulateCharacterTypeSpawnCountsRecord(connection, 4, 3, 1)
        PopulateCharacterTypeSpawnCountsRecord(connection, 4, 4, 10)
        PopulateCharacterTypeSpawnCountsRecord(connection, 4, 5, 25)
        PopulateCharacterTypeSpawnCountsRecord(connection, 5, 4, 1)
        PopulateCharacterTypeSpawnCountsRecord(connection, 6, 1, 30)
        PopulateCharacterTypeSpawnCountsRecord(connection, 6, 2, 45)
        PopulateCharacterTypeSpawnCountsRecord(connection, 6, 3, 30)
        PopulateCharacterTypeSpawnCountsRecord(connection, 6, 4, 15)
        PopulateCharacterTypeSpawnCountsRecord(connection, 7, 1, 5)
        PopulateCharacterTypeSpawnCountsRecord(connection, 7, 2, 15)
        PopulateCharacterTypeSpawnCountsRecord(connection, 7, 3, 30)
        PopulateCharacterTypeSpawnCountsRecord(connection, 7, 4, 45)
        PopulateCharacterTypeSpawnCountsRecord(connection, 7, 5, 30)
        PopulateCharacterTypeSpawnCountsRecord(connection, 8, 5, 1)
        PopulateCharacterTypeSpawnCountsRecord(connection, 9, 1, 30)
        PopulateCharacterTypeSpawnCountsRecord(connection, 9, 2, 15)
        PopulateCharacterTypeSpawnCountsRecord(connection, 10, 6, 100)
        PopulateCharacterTypeSpawnCountsRecord(connection, 12, 2, 1)
        PopulateCharacterTypeSpawnCountsRecord(connection, 12, 3, 15)
        PopulateCharacterTypeSpawnCountsRecord(connection, 12, 4, 30)
        PopulateCharacterTypeSpawnCountsRecord(connection, 12, 5, 45)
        PopulateCharacterTypeSpawnCountsRecord(connection, 14, 1, 30)
        PopulateCharacterTypeSpawnCountsRecord(connection, 14, 2, 45)
        PopulateCharacterTypeSpawnCountsRecord(connection, 14, 3, 30)
        PopulateCharacterTypeSpawnCountsRecord(connection, 14, 4, 15)
        PopulateCharacterTypeSpawnCountsRecord(connection, 15, 1, 15)
        PopulateCharacterTypeSpawnCountsRecord(connection, 15, 2, 30)
        PopulateCharacterTypeSpawnCountsRecord(connection, 15, 3, 45)
        PopulateCharacterTypeSpawnCountsRecord(connection, 15, 4, 30)
        PopulateCharacterTypeSpawnCountsRecord(connection, 15, 5, 15)
        PopulateCharacterTypeSpawnCountsRecord(connection, 16, 2, 30)
        PopulateCharacterTypeSpawnCountsRecord(connection, 16, 3, 45)
        PopulateCharacterTypeSpawnCountsRecord(connection, 16, 4, 30)
    End Sub
    Sub PopulateLocationTypesRecord(connection As SqliteConnection, LocationTypeId As Long, LocationTypeName As String, IsDungeon As Long, CanMap As Long, RequiresMP As Long)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.LocationTypes}]([{Columns.LocationTypeIdColumn}], [{Columns.LocationTypeNameColumn}], [{Columns.IsDungeonColumn}], [{Columns.CanMapColumn}], [{Columns.RequiresMPColumn}]) VALUES (@{Columns.LocationTypeIdColumn}, @{Columns.LocationTypeNameColumn}, @{Columns.IsDungeonColumn}, @{Columns.CanMapColumn}, @{Columns.RequiresMPColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.LocationTypeIdColumn}", LocationTypeId)
            command.Parameters.AddWithValue($"@{Columns.LocationTypeNameColumn}", LocationTypeName)
            command.Parameters.AddWithValue($"@{Columns.IsDungeonColumn}", IsDungeon)
            command.Parameters.AddWithValue($"@{Columns.CanMapColumn}", CanMap)
            command.Parameters.AddWithValue($"@{Columns.RequiresMPColumn}", RequiresMP)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulateLocationTypes(connection As SqliteConnection)
        PopulateLocationTypesRecord(connection, 1, "Town Square", 0, 0, 0)
        PopulateLocationTypesRecord(connection, 2, "Town", 0, 0, 0)
        PopulateLocationTypesRecord(connection, 3, "Church Entrance", 0, 0, 0)
        PopulateLocationTypesRecord(connection, 4, "Dungeon", 1, 1, 1)
        PopulateLocationTypesRecord(connection, 5, "Dungeon Dead End", 1, 1, 1)
        PopulateLocationTypesRecord(connection, 6, "Dungeon Boss", 1, 1, 1)
        PopulateLocationTypesRecord(connection, 7, "Cellar", 1, 0, 1)
        PopulateLocationTypesRecord(connection, 8, "Moon", 1, 1, 1)
    End Sub
    Sub PopulateCharacterTypeSpawnLocationsRecord(connection As SqliteConnection, CharacterTypeId As Long, DungeonLevelId As Long, LocationTypeId As Long)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.CharacterTypeSpawnLocations}]([{Columns.CharacterTypeIdColumn}], [{Columns.DungeonLevelIdColumn}], [{Columns.LocationTypeIdColumn}]) VALUES (@{Columns.CharacterTypeIdColumn}, @{Columns.DungeonLevelIdColumn}, @{Columns.LocationTypeIdColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.CharacterTypeIdColumn}", CharacterTypeId)
            command.Parameters.AddWithValue($"@{Columns.DungeonLevelIdColumn}", DungeonLevelId)
            command.Parameters.AddWithValue($"@{Columns.LocationTypeIdColumn}", LocationTypeId)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulateCharacterTypeSpawnLocations(connection As SqliteConnection)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 1, 1, 6)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 1, 2, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 1, 2, 5)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 1, 3, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 1, 3, 5)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 1, 4, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 1, 4, 5)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 1, 5, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 1, 5, 5)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 2, 1, 5)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 2, 2, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 2, 2, 5)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 2, 3, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 2, 3, 5)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 2, 4, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 2, 4, 5)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 2, 5, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 2, 5, 5)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 3, 1, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 3, 2, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 3, 3, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 3, 4, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 3, 5, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 4, 3, 6)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 4, 4, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 4, 4, 5)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 4, 5, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 4, 5, 5)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 5, 4, 6)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 6, 1, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 6, 2, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 6, 3, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 6, 4, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 6, 5, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 7, 1, 5)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 7, 2, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 7, 2, 5)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 7, 3, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 7, 3, 5)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 7, 4, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 7, 4, 5)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 7, 5, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 7, 5, 5)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 8, 5, 6)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 9, 1, 5)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 9, 2, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 9, 2, 5)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 9, 3, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 9, 3, 5)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 9, 4, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 9, 4, 5)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 9, 5, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 9, 5, 5)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 10, 6, 8)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 12, 2, 6)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 12, 3, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 12, 3, 5)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 12, 4, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 12, 4, 5)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 12, 5, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 12, 5, 5)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 14, 1, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 14, 2, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 14, 3, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 14, 4, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 14, 5, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 15, 1, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 15, 2, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 15, 3, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 15, 4, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 15, 5, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 16, 1, 5)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 16, 2, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 16, 2, 5)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 16, 3, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 16, 3, 5)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 16, 4, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 16, 4, 5)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 16, 5, 4)
        PopulateCharacterTypeSpawnLocationsRecord(connection, 16, 5, 5)
    End Sub
    Sub PopulateEquipSlotsRecord(connection As SqliteConnection, EquipSlotId As Long, EquipSlotName As String)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.EquipSlots}]([{Columns.EquipSlotIdColumn}], [{Columns.EquipSlotNameColumn}]) VALUES (@{Columns.EquipSlotIdColumn}, @{Columns.EquipSlotNameColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.EquipSlotIdColumn}", EquipSlotId)
            command.Parameters.AddWithValue($"@{Columns.EquipSlotNameColumn}", EquipSlotName)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulateEquipSlots(connection As SqliteConnection)
        PopulateEquipSlotsRecord(connection, 1, "Weapon")
        PopulateEquipSlotsRecord(connection, 2, "Shield")
        PopulateEquipSlotsRecord(connection, 3, "Head")
        PopulateEquipSlotsRecord(connection, 4, "Torso")
        PopulateEquipSlotsRecord(connection, 5, "Legs")
        PopulateEquipSlotsRecord(connection, 6, "Neck")
        PopulateEquipSlotsRecord(connection, 7, "LHand")
        PopulateEquipSlotsRecord(connection, 8, "RHand")
    End Sub
    Sub PopulateQuestTypesRecord(connection As SqliteConnection, QuestTypeId As Long, CanAcceptEventName As String, AcceptEventName As String, CanCompleteEventName As String, CompleteEventName As String)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.QuestTypes}]([{Columns.QuestTypeIdColumn}], [{Columns.CanAcceptEventNameColumn}], [{Columns.AcceptEventNameColumn}], [{Columns.CanCompleteEventNameColumn}], [{Columns.CompleteEventNameColumn}]) VALUES (@{Columns.QuestTypeIdColumn}, @{Columns.CanAcceptEventNameColumn}, @{Columns.AcceptEventNameColumn}, @{Columns.CanCompleteEventNameColumn}, @{Columns.CompleteEventNameColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.QuestTypeIdColumn}", QuestTypeId)
            command.Parameters.AddWithValue($"@{Columns.CanAcceptEventNameColumn}", CanAcceptEventName)
            command.Parameters.AddWithValue($"@{Columns.AcceptEventNameColumn}", AcceptEventName)
            command.Parameters.AddWithValue($"@{Columns.CanCompleteEventNameColumn}", CanCompleteEventName)
            command.Parameters.AddWithValue($"@{Columns.CompleteEventNameColumn}", CompleteEventName)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulateQuestTypes(connection As SqliteConnection)
        PopulateQuestTypesRecord(connection, 1, "CharacterCanAcceptCellarRatsQuest", "CharacterAcceptCellarRatsQuest", "CharacterCanCompleteCellarRatsQuest", "CharacterCompleteCellarRatsQuest")
    End Sub
    Sub PopulateItemStatisticTypesRecord(connection As SqliteConnection, ItemStatisticTypeId As Long, DefaultValue As Long)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.ItemStatisticTypes}]([{Columns.ItemStatisticTypeIdColumn}], [{Columns.DefaultValueColumn}]) VALUES (@{Columns.ItemStatisticTypeIdColumn}, @{Columns.DefaultValueColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.ItemStatisticTypeIdColumn}", ItemStatisticTypeId)
            command.Parameters.AddWithValue($"@{Columns.DefaultValueColumn}", DefaultValue)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulateItemStatisticTypes(connection As SqliteConnection)
        PopulateItemStatisticTypesRecord(connection, 1, 0)
    End Sub
    Sub PopulateItemTypeEquipSlotsRecord(connection As SqliteConnection, ItemTypeId As Long, EquipSlotId As Long)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.ItemTypeEquipSlots}]([{Columns.ItemTypeIdColumn}], [{Columns.EquipSlotIdColumn}]) VALUES (@{Columns.ItemTypeIdColumn}, @{Columns.EquipSlotIdColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.ItemTypeIdColumn}", ItemTypeId)
            command.Parameters.AddWithValue($"@{Columns.EquipSlotIdColumn}", EquipSlotId)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulateItemTypeEquipSlots(connection As SqliteConnection)
        PopulateItemTypeEquipSlotsRecord(connection, 10, 1)
        PopulateItemTypeEquipSlotsRecord(connection, 15, 2)
        PopulateItemTypeEquipSlotsRecord(connection, 16, 3)
        PopulateItemTypeEquipSlotsRecord(connection, 17, 4)
        PopulateItemTypeEquipSlotsRecord(connection, 18, 1)
        PopulateItemTypeEquipSlotsRecord(connection, 19, 1)
        PopulateItemTypeEquipSlotsRecord(connection, 20, 4)
        PopulateItemTypeEquipSlotsRecord(connection, 27, 5)
        PopulateItemTypeEquipSlotsRecord(connection, 30, 1)
        PopulateItemTypeEquipSlotsRecord(connection, 43, 1)
        PopulateItemTypeEquipSlotsRecord(connection, 45, 6)
        PopulateItemTypeEquipSlotsRecord(connection, 46, 7)
        PopulateItemTypeEquipSlotsRecord(connection, 46, 8)
        PopulateItemTypeEquipSlotsRecord(connection, 48, 6)
        PopulateItemTypeEquipSlotsRecord(connection, 49, 6)
        PopulateItemTypeEquipSlotsRecord(connection, 50, 6)
        PopulateItemTypeEquipSlotsRecord(connection, 51, 6)
        PopulateItemTypeEquipSlotsRecord(connection, 52, 6)
    End Sub
    Sub PopulateItemTypeEventsRecord(connection As SqliteConnection, ItemTypeId As Long, EventId As Long, EventName As String)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.ItemTypeEvents}]([{Columns.ItemTypeIdColumn}], [{Columns.EventIdColumn}], [{Columns.EventNameColumn}]) VALUES (@{Columns.ItemTypeIdColumn}, @{Columns.EventIdColumn}, @{Columns.EventNameColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.ItemTypeIdColumn}", ItemTypeId)
            command.Parameters.AddWithValue($"@{Columns.EventIdColumn}", EventId)
            command.Parameters.AddWithValue($"@{Columns.EventNameColumn}", EventName)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulateItemTypeEvents(connection As SqliteConnection)
        PopulateItemTypeEventsRecord(connection, 7, 2, "AlwaysTrue")
        PopulateItemTypeEventsRecord(connection, 7, 3, "DrinkPotion")
        PopulateItemTypeEventsRecord(connection, 11, 2, "CanUseEarthShard")
        PopulateItemTypeEventsRecord(connection, 11, 3, "UseEarthShard")
        PopulateItemTypeEventsRecord(connection, 12, 2, "CanUseWaterShard")
        PopulateItemTypeEventsRecord(connection, 12, 3, "UseWaterShard")
        PopulateItemTypeEventsRecord(connection, 13, 2, "CanUseFireShard")
        PopulateItemTypeEventsRecord(connection, 13, 3, "UseFireShard")
        PopulateItemTypeEventsRecord(connection, 14, 2, "CanUseAirShard")
        PopulateItemTypeEventsRecord(connection, 14, 3, "UseAirShard")
        PopulateItemTypeEventsRecord(connection, 22, 2, "IsFightingUndead")
        PopulateItemTypeEventsRecord(connection, 22, 3, "UseHolyWater")
        PopulateItemTypeEventsRecord(connection, 23, 2, "IsInDungeon")
        PopulateItemTypeEventsRecord(connection, 23, 3, "UseTownPortal")
        PopulateItemTypeEventsRecord(connection, 24, 2, "AlwaysTrue")
        PopulateItemTypeEventsRecord(connection, 24, 3, "EatFood")
        PopulateItemTypeEventsRecord(connection, 25, 2, "AlwaysTrue")
        PopulateItemTypeEventsRecord(connection, 25, 3, "UseMagicEgg")
        PopulateItemTypeEventsRecord(connection, 26, 2, "CanUseBeer")
        PopulateItemTypeEventsRecord(connection, 26, 3, "UseBeer")
        PopulateItemTypeEventsRecord(connection, 28, 2, "CanUsePr0n")
        PopulateItemTypeEventsRecord(connection, 28, 3, "UsePr0n")
        PopulateItemTypeEventsRecord(connection, 29, 2, "IsInDungeon")
        PopulateItemTypeEventsRecord(connection, 29, 3, "UseMoonPortal")
        PopulateItemTypeEventsRecord(connection, 30, 2, "CanUseBottle")
        PopulateItemTypeEventsRecord(connection, 30, 3, "UseBottle")
        PopulateItemTypeEventsRecord(connection, 31, 2, "CanLearnHolyBolt")
        PopulateItemTypeEventsRecord(connection, 31, 3, "LearnHolyBolt")
        PopulateItemTypeEventsRecord(connection, 34, 2, "HasBong")
        PopulateItemTypeEventsRecord(connection, 34, 3, "UseHerb")
        PopulateItemTypeEventsRecord(connection, 35, 1, "PurifyFood")
        PopulateItemTypeEventsRecord(connection, 35, 2, "AlwaysTrue")
        PopulateItemTypeEventsRecord(connection, 35, 3, "UseRottenFood")
        PopulateItemTypeEventsRecord(connection, 37, 2, "CanUseRottenEgg")
        PopulateItemTypeEventsRecord(connection, 37, 3, "UseRottenEgg")
        PopulateItemTypeEventsRecord(connection, 47, 2, "CanLearnPurify")
        PopulateItemTypeEventsRecord(connection, 47, 3, "LearnPurify")
    End Sub
    Sub PopulateShoppeTypesRecord(connection As SqliteConnection, ShoppeTypeId As Long, ShoppeTypeName As String)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.ShoppeTypes}]([{Columns.ShoppeTypeIdColumn}], [{Columns.ShoppeTypeNameColumn}]) VALUES (@{Columns.ShoppeTypeIdColumn}, @{Columns.ShoppeTypeNameColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.ShoppeTypeIdColumn}", ShoppeTypeId)
            command.Parameters.AddWithValue($"@{Columns.ShoppeTypeNameColumn}", ShoppeTypeName)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Friend Const ShoppeType1 = 1L
    Friend Const ShoppeType2 = 2L
    Friend Const ShoppeType3 = 3L
    Friend Const ShoppeType4 = 4L
    Friend Const ShoppeType5 = 5L
    Sub PopulateShoppeTypes(connection As SqliteConnection)
        PopulateShoppeTypesRecord(connection, ShoppeType1, "Magic")
        PopulateShoppeTypesRecord(connection, ShoppeType2, "Blacksmith")
        PopulateShoppeTypesRecord(connection, ShoppeType3, "Innkeeper")
        PopulateShoppeTypesRecord(connection, ShoppeType4, "Healer")
        PopulateShoppeTypesRecord(connection, ShoppeType5, "Black Market")
    End Sub
    Sub PopulateItemTypeSpawnCountsRecord(connection As SqliteConnection, ItemTypeId As Long, DungeonLevelId As Long, SpawnDice As String)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.ItemTypeSpawnCounts}]([{Columns.ItemTypeIdColumn}], [{Columns.DungeonLevelIdColumn}], [{Columns.SpawnDiceColumn}]) VALUES (@{Columns.ItemTypeIdColumn}, @{Columns.DungeonLevelIdColumn}, @{Columns.SpawnDiceColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.ItemTypeIdColumn}", ItemTypeId)
            command.Parameters.AddWithValue($"@{Columns.DungeonLevelIdColumn}", DungeonLevelId)
            command.Parameters.AddWithValue($"@{Columns.SpawnDiceColumn}", SpawnDice)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulateItemTypeSpawnCounts(connection As SqliteConnection)
        PopulateItemTypeSpawnCountsRecord(connection, 7, 1, "3d6")
        PopulateItemTypeSpawnCountsRecord(connection, 7, 2, "3d6")
        PopulateItemTypeSpawnCountsRecord(connection, 7, 3, "3d6")
        PopulateItemTypeSpawnCountsRecord(connection, 7, 4, "3d6")
        PopulateItemTypeSpawnCountsRecord(connection, 7, 5, "3d6")
        PopulateItemTypeSpawnCountsRecord(connection, 10, 1, "4d6")
        PopulateItemTypeSpawnCountsRecord(connection, 10, 2, "2d6")
        PopulateItemTypeSpawnCountsRecord(connection, 11, 2, "1d1")
        PopulateItemTypeSpawnCountsRecord(connection, 12, 4, "1d1")
        PopulateItemTypeSpawnCountsRecord(connection, 13, 3, "1d1")
        PopulateItemTypeSpawnCountsRecord(connection, 14, 1, "1d1")
        PopulateItemTypeSpawnCountsRecord(connection, 15, 1, "3d6")
        PopulateItemTypeSpawnCountsRecord(connection, 16, 1, "3d6")
        PopulateItemTypeSpawnCountsRecord(connection, 17, 1, "1d6")
        PopulateItemTypeSpawnCountsRecord(connection, 18, 1, "2d6")
        PopulateItemTypeSpawnCountsRecord(connection, 18, 2, "1d6")
        PopulateItemTypeSpawnCountsRecord(connection, 19, 2, "2d6")
        PopulateItemTypeSpawnCountsRecord(connection, 19, 3, "1d6")
        PopulateItemTypeSpawnCountsRecord(connection, 20, 2, "1d6")
        PopulateItemTypeSpawnCountsRecord(connection, 43, 6, "1d1")
        PopulateItemTypeSpawnCountsRecord(connection, 45, 1, "1d1")
        PopulateItemTypeSpawnCountsRecord(connection, 48, 4, "1d1")
        PopulateItemTypeSpawnCountsRecord(connection, 50, 3, "1d1")
        PopulateItemTypeSpawnCountsRecord(connection, 51, 5, "1d1")
    End Sub
    Sub PopulateItemTypeSpawnLocationTypesRecord(connection As SqliteConnection, ItemTypeId As Long, DungeonLevelId As Long, LocationTypeId As Long)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.ItemTypeSpawnLocationTypes}]([{Columns.ItemTypeIdColumn}], [{Columns.DungeonLevelIdColumn}], [{Columns.LocationTypeIdColumn}]) VALUES (@{Columns.ItemTypeIdColumn}, @{Columns.DungeonLevelIdColumn}, @{Columns.LocationTypeIdColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.ItemTypeIdColumn}", ItemTypeId)
            command.Parameters.AddWithValue($"@{Columns.DungeonLevelIdColumn}", DungeonLevelId)
            command.Parameters.AddWithValue($"@{Columns.LocationTypeIdColumn}", LocationTypeId)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulateItemTypeSpawnLocationTypes(connection As SqliteConnection)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 1, 1, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 1, 2, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 1, 3, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 1, 4, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 1, 5, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 2, 1, 5)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 3, 2, 5)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 4, 3, 5)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 5, 4, 5)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 7, 1, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 7, 1, 5)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 7, 2, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 7, 2, 5)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 7, 3, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 7, 3, 5)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 7, 4, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 7, 4, 5)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 7, 5, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 7, 5, 5)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 10, 1, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 10, 2, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 10, 3, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 10, 4, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 10, 5, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 11, 2, 6)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 12, 4, 6)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 14, 1, 6)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 15, 1, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 15, 1, 5)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 15, 2, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 15, 2, 5)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 15, 3, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 15, 3, 5)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 15, 4, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 15, 4, 5)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 15, 5, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 15, 5, 5)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 16, 1, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 16, 1, 5)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 16, 2, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 16, 2, 5)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 16, 3, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 16, 3, 5)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 16, 4, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 16, 4, 5)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 16, 5, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 16, 5, 5)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 17, 1, 5)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 17, 2, 5)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 17, 2, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 17, 3, 5)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 17, 3, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 17, 4, 5)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 17, 4, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 17, 5, 5)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 17, 5, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 18, 1, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 18, 2, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 18, 3, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 18, 4, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 18, 5, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 19, 1, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 19, 2, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 19, 3, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 19, 4, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 19, 5, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 20, 2, 5)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 20, 3, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 20, 3, 5)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 20, 4, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 20, 4, 5)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 20, 5, 4)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 20, 5, 5)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 43, 6, 8)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 45, 1, 5)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 45, 1, 6)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 48, 4, 5)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 48, 4, 6)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 50, 3, 5)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 50, 3, 6)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 51, 2, 5)
        PopulateItemTypeSpawnLocationTypesRecord(connection, 51, 2, 6)
    End Sub
    Sub PopulateItemTypeCharacterStatisticBuffsRecord(connection As SqliteConnection, ItemTypeId As Long, CharacterStatisticTypeId As Long, Buff As Long)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.ItemTypeCharacterStatisticBuffs}]([{Columns.ItemTypeIdColumn}], [{Columns.CharacterStatisticTypeIdColumn}], [{Columns.BuffColumn}]) VALUES (@{Columns.ItemTypeIdColumn}, @{Columns.CharacterStatisticTypeIdColumn}, @{Columns.BuffColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.ItemTypeIdColumn}", ItemTypeId)
            command.Parameters.AddWithValue($"@{Columns.CharacterStatisticTypeIdColumn}", CharacterStatisticTypeId)
            command.Parameters.AddWithValue($"@{Columns.BuffColumn}", Buff)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulateItemTypeCharacterStatisticBuffs(connection As SqliteConnection)
        PopulateItemTypeCharacterStatisticBuffsRecord(connection, 45, 6, 1)
        PopulateItemTypeCharacterStatisticBuffsRecord(connection, 46, 6, 1)
        PopulateItemTypeCharacterStatisticBuffsRecord(connection, 49, 2, 1)
        PopulateItemTypeCharacterStatisticBuffsRecord(connection, 50, 5, 1)
        PopulateItemTypeCharacterStatisticBuffsRecord(connection, 51, 8, 1)
    End Sub
    Sub PopulateItemTypeStatisticTypesRecord(connection As SqliteConnection, ItemTypeStatisticTypeId As Long, ItemTypeStatisticTypeName As String)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.ItemTypeStatisticTypes}]([{Columns.ItemTypeStatisticTypeIdColumn}], [{Columns.ItemTypeStatisticTypeNameColumn}]) VALUES (@{Columns.ItemTypeStatisticTypeIdColumn}, @{Columns.ItemTypeStatisticTypeNameColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.ItemTypeStatisticTypeIdColumn}", ItemTypeStatisticTypeId)
            command.Parameters.AddWithValue($"@{Columns.ItemTypeStatisticTypeNameColumn}", ItemTypeStatisticTypeName)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulateItemTypeStatisticTypes(connection As SqliteConnection)
        PopulateItemTypeStatisticTypesRecord(connection, 1, "Encumbrance")
        PopulateItemTypeStatisticTypesRecord(connection, 2, "AttackDice")
        PopulateItemTypeStatisticTypesRecord(connection, 3, "MaximumDamage")
        PopulateItemTypeStatisticTypesRecord(connection, 4, "DefendDice")
        PopulateItemTypeStatisticTypesRecord(connection, 5, "MaximumDurability")
        PopulateItemTypeStatisticTypesRecord(connection, 6, "Offer")
        PopulateItemTypeStatisticTypesRecord(connection, 7, "Price")
        PopulateItemTypeStatisticTypesRecord(connection, 8, "RepairPrice")
    End Sub
    Sub PopulateItemTypeStatisticsRecord(connection As SqliteConnection, ItemTypeId As Long, ItemTypeStatisticTypeId As Long, ItemTypeStatisticValue As Long)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.ItemTypeStatistics}]([{Columns.ItemTypeIdColumn}], [{Columns.ItemTypeStatisticTypeIdColumn}], [{Columns.ItemTypeStatisticValueColumn}]) VALUES (@{Columns.ItemTypeIdColumn}, @{Columns.ItemTypeStatisticTypeIdColumn}, @{Columns.ItemTypeStatisticValueColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.ItemTypeIdColumn}", ItemTypeId)
            command.Parameters.AddWithValue($"@{Columns.ItemTypeStatisticTypeIdColumn}", ItemTypeStatisticTypeId)
            command.Parameters.AddWithValue($"@{Columns.ItemTypeStatisticValueColumn}", ItemTypeStatisticValue)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulateItemTypeStatistics(connection As SqliteConnection)
        PopulateItemTypeStatisticsRecord(connection, 7, 1, 2)
        PopulateItemTypeStatisticsRecord(connection, 7, 7, 15)
        PopulateItemTypeStatisticsRecord(connection, 8, 6, 5)
        PopulateItemTypeStatisticsRecord(connection, 9, 6, 5)
        PopulateItemTypeStatisticsRecord(connection, 10, 1, 1)
        PopulateItemTypeStatisticsRecord(connection, 10, 2, 2)
        PopulateItemTypeStatisticsRecord(connection, 10, 3, 1)
        PopulateItemTypeStatisticsRecord(connection, 10, 5, 10)
        PopulateItemTypeStatisticsRecord(connection, 10, 6, 1)
        PopulateItemTypeStatisticsRecord(connection, 10, 7, 5)
        PopulateItemTypeStatisticsRecord(connection, 10, 8, 2)
        PopulateItemTypeStatisticsRecord(connection, 15, 1, 5)
        PopulateItemTypeStatisticsRecord(connection, 15, 4, 2)
        PopulateItemTypeStatisticsRecord(connection, 15, 5, 10)
        PopulateItemTypeStatisticsRecord(connection, 15, 6, 3)
        PopulateItemTypeStatisticsRecord(connection, 15, 7, 15)
        PopulateItemTypeStatisticsRecord(connection, 15, 8, 6)
        PopulateItemTypeStatisticsRecord(connection, 16, 1, 2)
        PopulateItemTypeStatisticsRecord(connection, 16, 4, 2)
        PopulateItemTypeStatisticsRecord(connection, 16, 5, 10)
        PopulateItemTypeStatisticsRecord(connection, 16, 6, 2)
        PopulateItemTypeStatisticsRecord(connection, 16, 7, 10)
        PopulateItemTypeStatisticsRecord(connection, 16, 8, 4)
        PopulateItemTypeStatisticsRecord(connection, 17, 1, 20)
        PopulateItemTypeStatisticsRecord(connection, 17, 3, 2)
        PopulateItemTypeStatisticsRecord(connection, 17, 4, 2)
        PopulateItemTypeStatisticsRecord(connection, 17, 6, 10)
        PopulateItemTypeStatisticsRecord(connection, 17, 7, 50)
        PopulateItemTypeStatisticsRecord(connection, 17, 8, 20)
        PopulateItemTypeStatisticsRecord(connection, 18, 1, 5)
        PopulateItemTypeStatisticsRecord(connection, 18, 3, 2)
        PopulateItemTypeStatisticsRecord(connection, 18, 2, 4)
        PopulateItemTypeStatisticsRecord(connection, 18, 5, 20)
        PopulateItemTypeStatisticsRecord(connection, 18, 6, 5)
        PopulateItemTypeStatisticsRecord(connection, 18, 7, 25)
        PopulateItemTypeStatisticsRecord(connection, 18, 8, 10)
        PopulateItemTypeStatisticsRecord(connection, 19, 1, 10)
        PopulateItemTypeStatisticsRecord(connection, 19, 2, 6)
        PopulateItemTypeStatisticsRecord(connection, 19, 3, 3)
        PopulateItemTypeStatisticsRecord(connection, 19, 5, 40)
        PopulateItemTypeStatisticsRecord(connection, 19, 6, 20)
        PopulateItemTypeStatisticsRecord(connection, 19, 7, 100)
        PopulateItemTypeStatisticsRecord(connection, 19, 8, 40)
        PopulateItemTypeStatisticsRecord(connection, 20, 1, 40)
        PopulateItemTypeStatisticsRecord(connection, 20, 4, 4)
        PopulateItemTypeStatisticsRecord(connection, 20, 5, 50)
        PopulateItemTypeStatisticsRecord(connection, 20, 6, 50)
        PopulateItemTypeStatisticsRecord(connection, 20, 7, 250)
        PopulateItemTypeStatisticsRecord(connection, 20, 8, 100)
        PopulateItemTypeStatisticsRecord(connection, 21, 6, 1)
        PopulateItemTypeStatisticsRecord(connection, 22, 7, 10)
        PopulateItemTypeStatisticsRecord(connection, 23, 7, 50)
        PopulateItemTypeStatisticsRecord(connection, 24, 7, 2)
        PopulateItemTypeStatisticsRecord(connection, 25, 6, 100)
        PopulateItemTypeStatisticsRecord(connection, 26, 1, 2)
        PopulateItemTypeStatisticsRecord(connection, 26, 7, 5)
        PopulateItemTypeStatisticsRecord(connection, 27, 7, 100)
        PopulateItemTypeStatisticsRecord(connection, 28, 7, 10)
        PopulateItemTypeStatisticsRecord(connection, 29, 7, 5000)
        PopulateItemTypeStatisticsRecord(connection, 30, 1, 1)
        PopulateItemTypeStatisticsRecord(connection, 30, 2, 2)
        PopulateItemTypeStatisticsRecord(connection, 30, 3, 1)
        PopulateItemTypeStatisticsRecord(connection, 30, 5, 3)
        PopulateItemTypeStatisticsRecord(connection, 31, 7, 100)
        PopulateItemTypeStatisticsRecord(connection, 32, 6, 10)
        PopulateItemTypeStatisticsRecord(connection, 33, 7, 25)
        PopulateItemTypeStatisticsRecord(connection, 34, 7, 5)
        PopulateItemTypeStatisticsRecord(connection, 36, 6, 25)
        PopulateItemTypeStatisticsRecord(connection, 38, 6, 5)
        PopulateItemTypeStatisticsRecord(connection, 39, 1, 2)
        PopulateItemTypeStatisticsRecord(connection, 39, 6, 5)
        PopulateItemTypeStatisticsRecord(connection, 39, 7, 25)
        PopulateItemTypeStatisticsRecord(connection, 40, 6, 3)
        PopulateItemTypeStatisticsRecord(connection, 41, 6, 3)
        PopulateItemTypeStatisticsRecord(connection, 43, 1, 5)
        PopulateItemTypeStatisticsRecord(connection, 43, 3, 10)
        PopulateItemTypeStatisticsRecord(connection, 43, 4, 5)
        PopulateItemTypeStatisticsRecord(connection, 43, 6, 100)
        PopulateItemTypeStatisticsRecord(connection, 47, 7, 50)
        PopulateItemTypeStatisticsRecord(connection, 52, 7, 1000)
    End Sub
    Sub PopulateFeatureTypesRecord(connection As SqliteConnection, FeatureTypeId As Long, FeatureTypeName As String, LocationTypeId As Long, InteractionMode As Long)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.FeatureTypes}]([{Columns.FeatureTypeIdColumn}], [{Columns.FeatureTypeNameColumn}], [{Columns.LocationTypeIdColumn}], [{Columns.InteractionModeColumn}]) VALUES (@{Columns.FeatureTypeIdColumn}, @{Columns.FeatureTypeNameColumn}, @{Columns.LocationTypeIdColumn}, @{Columns.InteractionModeColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.FeatureTypeIdColumn}", FeatureTypeId)
            command.Parameters.AddWithValue($"@{Columns.FeatureTypeNameColumn}", FeatureTypeName)
            command.Parameters.AddWithValue($"@{Columns.LocationTypeIdColumn}", LocationTypeId)
            command.Parameters.AddWithValue($"@{Columns.InteractionModeColumn}", InteractionMode)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulateFeatureTypes(connection As SqliteConnection)
        PopulateFeatureTypesRecord(connection, 1, "Zooperdan the Elder", 1, 4)
        PopulateFeatureTypesRecord(connection, 2, "Graham the Innkeeper", 2, 5)
        PopulateFeatureTypesRecord(connection, 3, "Yermom the Drunk", 2, 6)
        PopulateFeatureTypesRecord(connection, 4, "Sander the Chicken", 2, 7)
        PopulateFeatureTypesRecord(connection, 5, """Honest"" Dan", 2, 8)
        PopulateFeatureTypesRecord(connection, 6, "Marcus the Black Mage", 2, 9)
        PopulateFeatureTypesRecord(connection, 7, "Samuli the Blacksmith", 2, 10)
        PopulateFeatureTypesRecord(connection, 8, "Nihilist Healer Marten", 2, 12)
        PopulateFeatureTypesRecord(connection, 9, "David the Constable", 2, 11)
    End Sub
    Sub PopulateDirectionsRecord(connection As SqliteConnection, DirectionId As Long, DirectionName As String, Abbreviation As String, IsCardinal As Long, PreviousDirectionId As Long?, OppositeDirectionId As Long, NextDirectionId As Long?)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.Directions}]([{Columns.DirectionIdColumn}], [{Columns.DirectionNameColumn}], [{Columns.AbbreviationColumn}], [{Columns.IsCardinalColumn}], [{Columns.PreviousDirectionIdColumn}], [{Columns.OppositeDirectionIdColumn}], [{Columns.NextDirectionIdColumn}]) VALUES (@{Columns.DirectionIdColumn}, @{Columns.DirectionNameColumn}, @{Columns.AbbreviationColumn}, @{Columns.IsCardinalColumn}, @{Columns.PreviousDirectionIdColumn}, @{Columns.OppositeDirectionIdColumn}, @{Columns.NextDirectionIdColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.DirectionIdColumn}", DirectionId)
            command.Parameters.AddWithValue($"@{Columns.DirectionNameColumn}", DirectionName)
            command.Parameters.AddWithValue($"@{Columns.AbbreviationColumn}", Abbreviation)
            command.Parameters.AddWithValue($"@{Columns.IsCardinalColumn}", IsCardinal)
            command.Parameters.AddWithValue($"@{Columns.PreviousDirectionIdColumn}", If(PreviousDirectionId Is Nothing, CObj(DBNull.Value), PreviousDirectionId))
            command.Parameters.AddWithValue($"@{Columns.OppositeDirectionIdColumn}", OppositeDirectionId)
            command.Parameters.AddWithValue($"@{Columns.NextDirectionIdColumn}", If(NextDirectionId Is Nothing, CObj(DBNull.Value), NextDirectionId))
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulateDirections(connection As SqliteConnection)
        PopulateDirectionsRecord(connection, 1, "North", "N", 1, 4, 3, 2)
        PopulateDirectionsRecord(connection, 2, "East", "E", 1, 1, 4, 3)
        PopulateDirectionsRecord(connection, 3, "South", "S", 1, 2, 1, 4)
        PopulateDirectionsRecord(connection, 4, "West", "W", 1, 3, 2, 1)
        PopulateDirectionsRecord(connection, 5, "Up", "U", 0, Nothing, 6, Nothing)
        PopulateDirectionsRecord(connection, 6, "Down", "D", 0, Nothing, 5, Nothing)
        PopulateDirectionsRecord(connection, 7, "In", "In", 0, Nothing, 8, Nothing)
        PopulateDirectionsRecord(connection, 8, "Out", "Out", 0, Nothing, 7, Nothing)
    End Sub
    Sub PopulateRouteTypesRecord(connection As SqliteConnection, RouteTypeId As Long, Abbreviation As String, IsSingleUse As Long)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.RouteTypes}]([{Columns.RouteTypeIdColumn}], [{Columns.AbbreviationColumn}], [{Columns.IsSingleUseColumn}]) VALUES (@{Columns.RouteTypeIdColumn}, @{Columns.AbbreviationColumn}, @{Columns.IsSingleUseColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.RouteTypeIdColumn}", RouteTypeId)
            command.Parameters.AddWithValue($"@{Columns.AbbreviationColumn}", Abbreviation)
            command.Parameters.AddWithValue($"@{Columns.IsSingleUseColumn}", IsSingleUse)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulateRouteTypes(connection As SqliteConnection)
        PopulateRouteTypesRecord(connection, 1, "  ", 0)
        PopulateRouteTypesRecord(connection, 2, "  ", 0)
        PopulateRouteTypesRecord(connection, 3, "  ", 0)
        PopulateRouteTypesRecord(connection, 4, "FE", 0)
        PopulateRouteTypesRecord(connection, 5, "CU", 0)
        PopulateRouteTypesRecord(connection, 6, "AG", 0)
        PopulateRouteTypesRecord(connection, 7, "AU", 0)
        PopulateRouteTypesRecord(connection, 8, "PT", 0)
        PopulateRouteTypesRecord(connection, 9, "EO", 0)
        PopulateRouteTypesRecord(connection, 10, "  ", 1)
        PopulateRouteTypesRecord(connection, 11, "  ", 0)
    End Sub
    Sub PopulateRouteTypeLocksRecord(connection As SqliteConnection, RouteTypeId As Long, UnlockedRouteTypeId As Long, UnlockItemTypeId As Long)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.RouteTypeLocks}]([{Columns.RouteTypeIdColumn}], [{Columns.UnlockedRouteTypeIdColumn}], [{Columns.UnlockItemTypeIdColumn}]) VALUES (@{Columns.RouteTypeIdColumn}, @{Columns.UnlockedRouteTypeIdColumn}, @{Columns.UnlockItemTypeIdColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.RouteTypeIdColumn}", RouteTypeId)
            command.Parameters.AddWithValue($"@{Columns.UnlockedRouteTypeIdColumn}", UnlockedRouteTypeId)
            command.Parameters.AddWithValue($"@{Columns.UnlockItemTypeIdColumn}", UnlockItemTypeId)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulateRouteTypeLocks(connection As SqliteConnection)
        PopulateRouteTypeLocksRecord(connection, 4, 2, 1)
        PopulateRouteTypeLocksRecord(connection, 5, 2, 2)
        PopulateRouteTypeLocksRecord(connection, 6, 2, 3)
        PopulateRouteTypeLocksRecord(connection, 7, 2, 4)
        PopulateRouteTypeLocksRecord(connection, 8, 2, 5)
        PopulateRouteTypeLocksRecord(connection, 9, 2, 6)
    End Sub
    Sub PopulateSpellTypesRecord(connection As SqliteConnection, SpellTypeId As Long, SpellTypeName As String, MaximumLevel As Long, CastCheck As String, Cast As String)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.SpellTypes}]([{Columns.SpellTypeIdColumn}], [{Columns.SpellTypeNameColumn}], [{Columns.MaximumLevelColumn}], [{Columns.CastCheckColumn}], [{Columns.CastColumn}]) VALUES (@{Columns.SpellTypeIdColumn}, @{Columns.SpellTypeNameColumn}, @{Columns.MaximumLevelColumn}, @{Columns.CastCheckColumn}, @{Columns.CastColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.SpellTypeIdColumn}", SpellTypeId)
            command.Parameters.AddWithValue($"@{Columns.SpellTypeNameColumn}", SpellTypeName)
            command.Parameters.AddWithValue($"@{Columns.MaximumLevelColumn}", MaximumLevel)
            command.Parameters.AddWithValue($"@{Columns.CastCheckColumn}", CastCheck)
            command.Parameters.AddWithValue($"@{Columns.CastColumn}", Cast)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulateSpellTypes(connection As SqliteConnection)
        PopulateSpellTypesRecord(connection, 1, "Holy Bolt", 1, "CharacterCanCastHolyBolt", "CharacterCastHolyBolt")
        PopulateSpellTypesRecord(connection, 2, "Purify", 1, "CharacterCanCastPurify", "CharacterCastPurify")
    End Sub
    Sub PopulateSpellTypeRequiredPowersRecord(connection As SqliteConnection, SpellTypeId As Long, SpellLevel As Long, Power As Long)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.SpellTypeRequiredPowers}]([{Columns.SpellTypeIdColumn}], [{Columns.SpellLevelColumn}], [{Columns.PowerColumn}]) VALUES (@{Columns.SpellTypeIdColumn}, @{Columns.SpellLevelColumn}, @{Columns.PowerColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.SpellTypeIdColumn}", SpellTypeId)
            command.Parameters.AddWithValue($"@{Columns.SpellLevelColumn}", SpellLevel)
            command.Parameters.AddWithValue($"@{Columns.PowerColumn}", Power)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulateSpellTypeRequiredPowers(connection As SqliteConnection)
        PopulateSpellTypeRequiredPowersRecord(connection, 1, 0, 0)
        PopulateSpellTypeRequiredPowersRecord(connection, 1, 1, 1)
        PopulateSpellTypeRequiredPowersRecord(connection, 2, 0, 0)
        PopulateSpellTypeRequiredPowersRecord(connection, 2, 1, 0)
    End Sub
    Sub PopulateLocationsRecord(connection As SqliteConnection, LocationId As Long, LocationTypeId As Long)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.Locations}]([{Columns.LocationIdColumn}], [{Columns.LocationTypeIdColumn}]) VALUES (@{Columns.LocationIdColumn}, @{Columns.LocationTypeIdColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.LocationIdColumn}", LocationId)
            command.Parameters.AddWithValue($"@{Columns.LocationTypeIdColumn}", LocationTypeId)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulateLocations(connection As SqliteConnection)
    End Sub
    Sub PopulateCharactersRecord(connection As SqliteConnection, CharacterId As Long, LocationId As Long, CharacterTypeId As Long)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.Characters}]([{Columns.CharacterIdColumn}], [{Columns.LocationIdColumn}], [{Columns.CharacterTypeIdColumn}]) VALUES (@{Columns.CharacterIdColumn}, @{Columns.LocationIdColumn}, @{Columns.CharacterTypeIdColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.CharacterIdColumn}", CharacterId)
            command.Parameters.AddWithValue($"@{Columns.LocationIdColumn}", LocationId)
            command.Parameters.AddWithValue($"@{Columns.CharacterTypeIdColumn}", CharacterTypeId)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulateCharacters(connection As SqliteConnection)
    End Sub
    Sub PopulateCharacterLocationsRecord(connection As SqliteConnection, CharacterId As Long, LocationId As Long)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.CharacterLocations}]([{Columns.CharacterIdColumn}], [{Columns.LocationIdColumn}]) VALUES (@{Columns.CharacterIdColumn}, @{Columns.LocationIdColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.CharacterIdColumn}", CharacterId)
            command.Parameters.AddWithValue($"@{Columns.LocationIdColumn}", LocationId)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulateCharacterLocations(connection As SqliteConnection)
    End Sub
    Sub PopulateCharacterSpellsRecord(connection As SqliteConnection, CharacterId As Long, SpellTypeId As Long, SpellLevel As Long)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.CharacterSpells}]([{Columns.CharacterIdColumn}], [{Columns.SpellTypeIdColumn}], [{Columns.SpellLevelColumn}]) VALUES (@{Columns.CharacterIdColumn}, @{Columns.SpellTypeIdColumn}, @{Columns.SpellLevelColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.CharacterIdColumn}", CharacterId)
            command.Parameters.AddWithValue($"@{Columns.SpellTypeIdColumn}", SpellTypeId)
            command.Parameters.AddWithValue($"@{Columns.SpellLevelColumn}", SpellLevel)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulateCharacterSpells(connection As SqliteConnection)
    End Sub
    Sub PopulatePlayersRecord(connection As SqliteConnection, PlayerId As Long, CharacterId As Long, DirectionId As Long, PlayerModeId As Long)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.Players}]([{Columns.PlayerIdColumn}], [{Columns.CharacterIdColumn}], [{Columns.DirectionIdColumn}], [{Columns.PlayerModeIdColumn}]) VALUES (@{Columns.PlayerIdColumn}, @{Columns.CharacterIdColumn}, @{Columns.DirectionIdColumn}, @{Columns.PlayerModeIdColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.PlayerIdColumn}", PlayerId)
            command.Parameters.AddWithValue($"@{Columns.CharacterIdColumn}", CharacterId)
            command.Parameters.AddWithValue($"@{Columns.DirectionIdColumn}", DirectionId)
            command.Parameters.AddWithValue($"@{Columns.PlayerModeIdColumn}", PlayerModeId)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulatePlayers(connection As SqliteConnection)
    End Sub
    Sub PopulateItemsRecord(connection As SqliteConnection, ItemId As Long, ItemTypeId As Long)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.Items}]([{Columns.ItemIdColumn}], [{Columns.ItemTypeIdColumn}]) VALUES (@{Columns.ItemIdColumn}, @{Columns.ItemTypeIdColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.ItemIdColumn}", ItemId)
            command.Parameters.AddWithValue($"@{Columns.ItemTypeIdColumn}", ItemTypeId)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulateItems(connection As SqliteConnection)
    End Sub
    Sub PopulateCharacterEquipSlotsRecord(connection As SqliteConnection, CharacterId As Long, EquipSlotId As Long, ItemId As Long)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.CharacterEquipSlots}]([{Columns.CharacterIdColumn}], [{Columns.EquipSlotIdColumn}], [{Columns.ItemIdColumn}]) VALUES (@{Columns.CharacterIdColumn}, @{Columns.EquipSlotIdColumn}, @{Columns.ItemIdColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.CharacterIdColumn}", CharacterId)
            command.Parameters.AddWithValue($"@{Columns.EquipSlotIdColumn}", EquipSlotId)
            command.Parameters.AddWithValue($"@{Columns.ItemIdColumn}", ItemId)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulateCharacterEquipSlots(connection As SqliteConnection)
    End Sub
    Sub PopulateCharacterQuestCompletionsRecord(connection As SqliteConnection, CharacterId As Long, QuestTypeId As Long, Completions As Long)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.CharacterQuestCompletions}]([{Columns.CharacterIdColumn}], [{Columns.QuestTypeIdColumn}], [{Columns.CompletionsColumn}]) VALUES (@{Columns.CharacterIdColumn}, @{Columns.QuestTypeIdColumn}, @{Columns.CompletionsColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.CharacterIdColumn}", CharacterId)
            command.Parameters.AddWithValue($"@{Columns.QuestTypeIdColumn}", QuestTypeId)
            command.Parameters.AddWithValue($"@{Columns.CompletionsColumn}", Completions)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulateCharacterQuestCompletions(connection As SqliteConnection)
    End Sub
    Sub PopulateCharacterQuestsRecord(connection As SqliteConnection, CharacterId As Long, QuestTypeId As Long)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.CharacterQuests}]([{Columns.CharacterIdColumn}], [{Columns.QuestTypeIdColumn}]) VALUES (@{Columns.CharacterIdColumn}, @{Columns.QuestTypeIdColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.CharacterIdColumn}", CharacterId)
            command.Parameters.AddWithValue($"@{Columns.QuestTypeIdColumn}", QuestTypeId)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulateCharacterQuests(connection As SqliteConnection)
    End Sub
    Sub PopulateCharacterStatisticsRecord(connection As SqliteConnection, CharacterId As Long, CharacterStatisticTypeId As Long, StatisticValue As Long)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.CharacterStatistics}]([{Columns.CharacterIdColumn}], [{Columns.CharacterStatisticTypeIdColumn}], [{Columns.StatisticValueColumn}]) VALUES (@{Columns.CharacterIdColumn}, @{Columns.CharacterStatisticTypeIdColumn}, @{Columns.StatisticValueColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.CharacterIdColumn}", CharacterId)
            command.Parameters.AddWithValue($"@{Columns.CharacterStatisticTypeIdColumn}", CharacterStatisticTypeId)
            command.Parameters.AddWithValue($"@{Columns.StatisticValueColumn}", StatisticValue)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulateCharacterStatistics(connection As SqliteConnection)
    End Sub
    Sub PopulateInventoriesRecord(connection As SqliteConnection, InventoryId As Long, CharacterId As Long?, LocationId As Long?)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.Inventories}]([{Columns.InventoryIdColumn}], [{Columns.CharacterIdColumn}], [{Columns.LocationIdColumn}]) VALUES (@{Columns.InventoryIdColumn}, @{Columns.CharacterIdColumn}, @{Columns.LocationIdColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.InventoryIdColumn}", InventoryId)
            command.Parameters.AddWithValue($"@{Columns.CharacterIdColumn}", If(CharacterId Is Nothing, CObj(DBNull.Value), CharacterId))
            command.Parameters.AddWithValue($"@{Columns.LocationIdColumn}", If(LocationId Is Nothing, CObj(DBNull.Value), LocationId))
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulateInventories(connection As SqliteConnection)
    End Sub
    Sub PopulateInventoryItemsRecord(connection As SqliteConnection, InventoryId As Long, ItemId As Long)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.InventoryItems}]([{Columns.InventoryIdColumn}], [{Columns.ItemIdColumn}]) VALUES (@{Columns.InventoryIdColumn}, @{Columns.ItemIdColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.InventoryIdColumn}", InventoryId)
            command.Parameters.AddWithValue($"@{Columns.ItemIdColumn}", ItemId)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulateInventoryItems(connection As SqliteConnection)
    End Sub
    Sub PopulateItemStatisticsRecord(connection As SqliteConnection, ItemId As Long, ItemStatisticTypeId As Long, StatisticValue As Long)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.ItemStatistics}]([{Columns.ItemIdColumn}], [{Columns.ItemStatisticTypeIdColumn}], [{Columns.StatisticValueColumn}]) VALUES (@{Columns.ItemIdColumn}, @{Columns.ItemStatisticTypeIdColumn}, @{Columns.StatisticValueColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.ItemIdColumn}", ItemId)
            command.Parameters.AddWithValue($"@{Columns.ItemStatisticTypeIdColumn}", ItemStatisticTypeId)
            command.Parameters.AddWithValue($"@{Columns.StatisticValueColumn}", StatisticValue)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulateItemStatistics(connection As SqliteConnection)
    End Sub
    Sub PopulateLocationDungeonLevelsRecord(connection As SqliteConnection, LocationId As Long, DungeonLevelId As Long)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.LocationDungeonLevels}]([{Columns.LocationIdColumn}], [{Columns.DungeonLevelIdColumn}]) VALUES (@{Columns.LocationIdColumn}, @{Columns.DungeonLevelIdColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.LocationIdColumn}", LocationId)
            command.Parameters.AddWithValue($"@{Columns.DungeonLevelIdColumn}", DungeonLevelId)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulateLocationDungeonLevels(connection As SqliteConnection)
    End Sub
    Sub PopulateFeaturesRecord(connection As SqliteConnection, FeatureId As Long, FeatureTypeId As Long, LocationId As Long)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.Features}]([{Columns.FeatureIdColumn}], [{Columns.FeatureTypeIdColumn}], [{Columns.LocationIdColumn}]) VALUES (@{Columns.FeatureIdColumn}, @{Columns.FeatureTypeIdColumn}, @{Columns.LocationIdColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.FeatureIdColumn}", FeatureId)
            command.Parameters.AddWithValue($"@{Columns.FeatureTypeIdColumn}", FeatureTypeId)
            command.Parameters.AddWithValue($"@{Columns.LocationIdColumn}", LocationId)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulateFeatures(connection As SqliteConnection)
    End Sub
    Sub PopulateLocationStatisticsRecord(connection As SqliteConnection, LocationId As Long, LocationStatisticTypeId As Long, StatisticValue As Long)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.LocationStatistics}]([{Columns.LocationIdColumn}], [{Columns.LocationStatisticTypeIdColumn}], [{Columns.StatisticValueColumn}]) VALUES (@{Columns.LocationIdColumn}, @{Columns.LocationStatisticTypeIdColumn}, @{Columns.StatisticValueColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.LocationIdColumn}", LocationId)
            command.Parameters.AddWithValue($"@{Columns.LocationStatisticTypeIdColumn}", LocationStatisticTypeId)
            command.Parameters.AddWithValue($"@{Columns.StatisticValueColumn}", StatisticValue)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulateLocationStatistics(connection As SqliteConnection)
    End Sub
    Sub PopulateRoutesRecord(connection As SqliteConnection, RouteId As Long, LocationId As Long, DirectionId As Long, RouteTypeId As Long, ToLocationId As Long)
        Using command = New SqliteCommand($"INSERT INTO [{Tables.Routes}]([{Columns.RouteIdColumn}], [{Columns.LocationIdColumn}], [{Columns.DirectionIdColumn}], [{Columns.RouteTypeIdColumn}], [{Columns.ToLocationIdColumn}]) VALUES (@{Columns.RouteIdColumn}, @{Columns.LocationIdColumn}, @{Columns.DirectionIdColumn}, @{Columns.RouteTypeIdColumn}, @{Columns.ToLocationIdColumn});", connection)
            command.Parameters.AddWithValue($"@{Columns.RouteIdColumn}", RouteId)
            command.Parameters.AddWithValue($"@{Columns.LocationIdColumn}", LocationId)
            command.Parameters.AddWithValue($"@{Columns.DirectionIdColumn}", DirectionId)
            command.Parameters.AddWithValue($"@{Columns.RouteTypeIdColumn}", RouteTypeId)
            command.Parameters.AddWithValue($"@{Columns.ToLocationIdColumn}", ToLocationId)
            command.ExecuteNonQuery()
        End Using
    End Sub
    Sub PopulateRoutes(connection As SqliteConnection)
    End Sub
End Module
